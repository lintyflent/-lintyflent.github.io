{"version":3,"sources":["components/error-view/error-view.js","containers/error-container/error-container.js","utils/context.js","components/header-view/header-view.js","components/load-view/load-view.js","components/random-item-view/random-item-view.js","containers/random-item-container/random-item-container.js","utils/random-integer.js","components/record-view/record-view.js","containers/randoms-containers.js","components/item-list-view/item-list-view.js","containers/item-list-container/item-list-container.js","components/item-detalis-view/item-detalis-view.js","containers/item-detalis-container/item-detalis-container.js","containers/item-pages-containers.js","components/not-found-view/not-found-view.js","components/app-view/app-view.js","index.js","services/service.js"],"names":["ErrorView","className","RegisterError","state","error","this","setState","props","children","Component","Context","React","createContext","Provider","Consumer","HeaderView","pages","useContext","to","Menu","type","id","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","LoadView","require","RandomItemView","item","name","sourceImg","record","namesHeader","GetNewUrlImg","src","alt","onError","RandomItemContainer","interval","maxItem","sourceData","useState","SetItem","loading","status","SetStatus","onLoadedItem","updateItem","min","max","rand","Math","random","round","randomInteger","then","catch","useEffect","setInterval","clearInterval","Children","map","child","cloneElement","RecordView","field","label","reduction","SetRecord","RandomPerson","GetPerson","GetImgPersonUrl2","JsxCharacteristics","RandomPlanet","GetPlanet","GetImgPlanetUrl2","RandomStarship","GetStarship","GetImgStarshipUrl2","withRouter","itemList","history","currentPage","contentList","onClick","push","ItemListContainer","onGetAlldata","onLoadItemDetalis","SetItemList","ItemDetalisView","img","content","onGetData","getImgUrl","match","params","dataItem","updateDataItem","useCallback","undefined","PeoplesPage","selectedItem","SetSelectedItem","GetAllPeople","GetImgPersonUrl","Fragment","itemId","PlanetsPage","GetImgPlanetUrl","GetAllPlanets","StarshipsPage","GetImgStarshipUrl","GetAllStarships","NotFoundView","AppView","path","render","exact","service","_apiUrl","_imgUrl","_getId","url","getResource","a","fetch","req","ok","Error","saltLength","json","res","results","_transformPerson","person","gender","birthYear","birth_year","eyeColor","eye_color","mass","height","_transformPlanet","planet","population","rotationPeriod","rotation_period","diameter","climate","terrain","surfaceWater","surface_water","_transformStarship","model","starshipClass","starship_class","costInCredits","cost_in_credits","length","passengers","crew","MGLT","document","querySelector","ReactDOM","value","getElementById"],"mappings":"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","file":"static/js/main.62b47d00.chunk.js","sourcesContent":["import React from \"react\";\nimport './error-view.sass'\n\nexport const ErrorView = () =>\n{\n    return (\n        <div className=\"error\">\n            <h2>Oops!<br/></h2>\n            <span>Something clearly went wrong..<br/></span>\n            <span>Everything will work soon, don't worry :) <br/></span>\n        </div>\n    );\n}","import React, { Component } from \"react\";\nimport {ErrorView} from \"../../components/error-view/error-view\";\n\nexport class RegisterError extends Component\n{\n    state = { error: false }\n    componentDidCatch() { this.setState({ error: true } )}\n\n    render()\n    {\n        if (this.state.error)\n        {\n            return <ErrorView/>\n        }\n        else\n        {\n            return this.props.children;\n        }\n    }\n}","import React from \"react\";\n\nexport const Context = React.createContext();\nexport const Provider = Context.Provider;\nexport const Consumer = Context.Consumer;","import { Link } from \"react-router-dom\";\nimport React, { useContext } from \"react\";\nimport { Context } from \"../../utils/context\"\nimport \"./header-view.sass\"\n\nexport const HeaderView = () =>\n{\n    const { pages } = useContext( Context );\n    return(\n        <header className={\"header\"}>\n            <Link to={\"/\"} className={\"header-link\"}>star DB</Link>\n            <nav>\n                <ul className={\"header-ul\"}>\n                    <li><Link to={ \"/\"+pages[0]+\"/\" }>{ pages[0] }</Link></li>\n                    <li><Link to={ \"/\"+pages[1]+\"/\" }>{ pages[1] }</Link></li>\n                    <li><Link to={ \"/\"+pages[2]+\"/\" }>{ pages[2] }</Link></li>\n                </ul>\n            </nav>\n            <Menu/>\n        </header>\n    )\n}\n\nconst Menu = () =>\n{\n    const { pages } = useContext( Context );\n    return (\n        <div className=\"dropdown header-menu\">\n            <button className=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\"\n                    data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                Menu\n            </button>\n            <div className=\"dropdown-menu header-menu-list\" aria-labelledby=\"dropdownMenuButton\">\n                <Link className=\"dropdown-item\" to={ \"/\"+pages[0]+\"/\" }>{ pages[0] }</Link>\n                <Link className=\"dropdown-item\" to={ \"/\"+pages[1]+\"/\" }>{ pages[1] }</Link>\n                <Link className=\"dropdown-item\" to={ \"/\"+pages[2]+\"/\" }>{ pages[2] }</Link>\n            </div>\n        </div>\n    );\n}","import React from \"react\";\nimport \"./load-view.sass\"\n\nexport const LoadView = () =>\n{\n    return (\n        <div className=\"loadingio-spinner-eclipse-j6bz9624dx\">\n            <div className=\"ldio-0qmq0nafzgsp\">\n                <div></div>\n            </div>\n        </div>\n        /* generated by https://loading.io/ */\n    );\n}","import React from \"react\";\nimport \"./random-item-view.sass\"\nimport { Context } from \"../../utils/context\"\nconst { useContext } = require( \"react\" );\n\nexport const RandomItemView  = ({ item: { id, name }, sourceImg, record, namesHeader }) =>\n{\n    const { GetNewUrlImg } = useContext( Context );\n    return (\n        <section className=\"alert alert-dark random-item\">\n            <h1 className=\"random-item-header\">Random { namesHeader }</h1>\n            <img className=\"rounded random-item-img\"\n                 src={ sourceImg( id )}\n                 alt={ name }\n                 onError={() => GetNewUrlImg( \".random-item-img\" )}\n            />\n            <h2 className=\"random-item-name\">{ name }</h2>\n            <ul className=\"random-item-ul list-group\">\n                { record }\n            </ul>\n        </section>\n    );\n}","import { LoadView } from \"../../components/load-view/load-view\";\nimport React, { useEffect, useState } from \"react\";\nimport { RandomItemView } from \"../../components/random-item-view/random-item-view\";\nimport { randomInteger } from \"../../utils/random-integer\";\n\nexport const RandomItemContainer = ({ maxItem, sourceData, sourceImg, namesHeader, children }) =>\n{\n    const [ item, SetItem ] = useState({});\n    const [ status, SetStatus ] = useState({ loading: true, error: false });\n\n    const onLoadedItem = ( item ) =>\n    {\n        SetItem( item );\n        SetStatus({ ...status, loading: false })\n    };\n\n    const updateItem = () =>\n    {\n        SetStatus({ ...status, loading: true })\n        let id = randomInteger( 1, maxItem );\n        if ( id !== null )\n        {\n            sourceData( id )\n                .then( onLoadedItem )\n                .catch(( error ) =>\n                {\n                    updateItem( maxItem );\n                });\n        }\n    }\n\n    let interval;\n    useEffect(()=>\n    {\n        updateItem( maxItem );\n        interval = setInterval(() => updateItem( maxItem ), 60000 );\n        return () => clearInterval( interval );\n    }, [])\n\n    const { loading } = status;\n    if( loading )\n    {\n        return (\n            <section className=\"list-group random-item\">\n                <LoadView/>\n            </section>\n        );\n    }\n    else\n    {\n        return (\n            <RandomItemView item={ item }\n                      sourceImg={ sourceImg }\n                      record={ React.Children.map( children, ( child ) =>\n                      {\n                          return React.cloneElement( child, { item });\n                      })}\n                      namesHeader={ namesHeader }\n            />\n        );\n    }\n}","export const randomInteger = (min, max) =>\n{\n    let rand = min - 0.5 + Math.random() * (max - min + 1);\n    return Math.round(rand);\n}","import React from \"react\";\nimport './record-view.sass'\n\nexport const RecordView = ({ item, field, label, reduction = \"\" }) =>\n{\n    return (\n        <li className=\"list-group-item item-detalis-li\">{ label } { item[ field ]} { reduction }</li>\n    )\n}\n\nexport const SetRecord = ( field, label, reduction = \"\" ) =>\n{\n    return <RecordView field={ field } label={ label + \":\" } reduction={ reduction }/>;\n}\n\n","import {RandomItemContainer} from \"./random-item-container/random-item-container\";\nimport React, {useContext} from \"react\";\nimport { Context } from \"../utils/context\"\nimport {SetRecord} from \"../components/record-view/record-view\";\n\nexport const RandomPerson = () =>\n{\n    const {GetPerson, GetImgPersonUrl2, namesHeader} = useContext(Context);\n\n    const DataCharacteristics =\n        [\n            {field: \"eyeColor\", label: \"Eye color\", reduction: \"\"},\n            {field: \"birthYear\", label: \"Birth year\", reduction: \"\"},\n            {field: \"gender\", label: \"Gender\", reduction: \"\"},\n            {field: \"mass\", label: \"Mass\", reduction: \"kg\"},\n            {field: \"height\", label: \"Height\", reduction: \"sm\"},\n        ];\n    const JsxCharacteristics = DataCharacteristics.map((item)=> SetRecord(item.field, item.label, item.reduction));\n\n    return <RandomItemContainer sourceImg={GetImgPersonUrl2}\n                       sourceData={GetPerson}\n                       maxItem={80}\n                       namesHeader={namesHeader[0]}\n    >\n        {JsxCharacteristics}\n    </RandomItemContainer>\n}\nexport const RandomPlanet = () =>\n{\n    const {GetPlanet, GetImgPlanetUrl2, namesHeader} = useContext(Context);\n\n    const DataCharacteristics =\n        [\n            {field: \"population\", label: \"Population\", reduction: \"\"},\n            {field: \"surfaceWater\", label: \"Surface water\", reduction: \"%\"},\n            {field: \"terrain\", label: \"Terrain\", reduction: \"\"},\n            {field: \"rotationPeriod\", label: \"Rotation period\", reduction: \"day\"},\n            {field: \"diameter\", label: \"Diameter\", reduction: \"km\"},\n        ];\n    const JsxCharacteristics = DataCharacteristics.map((item)=> SetRecord(item.field, item.label, item.reduction));\n\n    return <RandomItemContainer sourceImg={GetImgPlanetUrl2}\n                       sourceData={GetPlanet}\n                       maxItem={60}\n                       namesHeader={namesHeader[1]}\n    >\n        {JsxCharacteristics}\n    </RandomItemContainer>\n}\nexport const RandomStarship = () =>\n{\n    const {GetStarship, GetImgStarshipUrl2, namesHeader} = useContext(Context);\n\n    const DataCharacteristics =\n        [\n            {field: \"starshipClass\", label: \"Class\", reduction: \"\"},\n            {field: \"length\", label: \"Length\", reduction: \"m\"},\n            {field: \"MGLT\", label: \"MGLT\", reduction: \"In h\"},\n            {field: \"crew\", label: \"Crew\", reduction: \"\"},\n            {field: \"passengers\", label: \"Passengers\", reduction: \"\"},\n        ];\n    const JsxCharacteristics = DataCharacteristics.map((item)=> SetRecord(item.field, item.label, item.reduction));\n\n    return <RandomItemContainer sourceImg={GetImgStarshipUrl2}\n                       sourceData={GetStarship}\n                       maxItem={15}\n                       namesHeader={namesHeader[2]}\n    >\n        {JsxCharacteristics}\n    </RandomItemContainer>\n}","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport \"./item-list-view.sass\"\n\nconst ItemListView = ({ itemList, history, currentPage }) =>\n{\n    const contentList = itemList.map(( item ) =>\n    {\n        return (\n            <li key={ item.name }\n                className={\"list-group-item item-list-view\"}\n                onClick={ () => { history.push( `/${currentPage }/${ item.id }`)}}\n            >{ item.name }</li>\n        );\n    });\n\n    return (\n        <ul className=\"list-group item-list\">\n            { contentList }\n        </ul>\n    );\n}\nexport default withRouter( ItemListView );","import { LoadView } from \"../../components/load-view/load-view\";\nimport React, { useEffect, useState } from \"react\";\nimport ItemListView from \"../../components/item-list-view/item-list-view\";\n\nexport const ItemListContainer = ({ onGetAlldata, onLoadItemDetalis, currentPage }) =>\n{\n    const [ itemList, SetItemList ] = useState( null );\n    const [ status, SetStatus ] = useState({ loading: true, error: false });\n    useEffect(()=>\n    {\n        onGetAlldata()\n            .then(( itemList ) =>\n            {\n                SetItemList( itemList );\n                SetStatus({ ...status ,loading: false });\n            })\n            .catch(( error ) => SetStatus({ loading: false, error: true }))\n    }, []);\n\n    const { loading } = status;\n    if(loading)\n    {\n        return (\n            <ul className=\"list-group item-list\">\n                <LoadView/>\n            </ul>\n        )\n    }\n    else\n    {\n        return (\n            <ItemListView itemList={ itemList }\n                          onLoadItemDetalis={( id ) => { onLoadItemDetalis( id ) }}\n                          currentPage={ currentPage }\n            />\n        );\n    }\n}\n","import React, { useContext } from \"react\";\nimport { Context } from \"../../utils/context\"\nimport \"./item-detalis-view.sass\"\n\nexport const ItemDetalisView = ({ item, img, record, namesHeader }) => {\n    const { name } = item;\n    const { GetNewUrlImg } = useContext( Context );\n\n    return (\n        <section className=\"item-detalis alert alert-dark\">\n            <h2 className=\"item-detalis-header\">Selected { namesHeader }</h2>\n            <img className=\"rounded item-detalis-img\"\n                 src={ img }\n                 alt={ name }\n                 onError={ () => GetNewUrlImg( \".item-detalis-img\" ) }\n            />\n            <h3 className={ \"item-detalis-name\" }>{ name }</h3>\n            <ul className={ \"list-group item-detalis-ul\" }>\n                { record }\n            </ul>\n        </section>\n    );\n}","import React, { useCallback, useEffect, useState } from \"react\";\nimport { LoadView } from \"../../components/load-view/load-view\";\nimport { ItemDetalisView } from \"../../components/item-detalis-view/item-detalis-view\";\nimport { withRouter } from \"react-router-dom\";\n\nconst ItemDetalisContainer = ({ onGetData, getImgUrl, children, match, namesHeader }) =>\n{\n    const { id } = match.params;\n    const [ dataItem, SetItem ] = useState({ item: null, img: null });\n    const [ status, SetStatus ] = useState({ loading: true, error: false });\n\n    const updateDataItem = useCallback(() =>\n    {\n        if ( id !== null && id !== undefined )\n        {\n            SetStatus(() => { return { ...status, loading: true, error: true }; });\n            onGetData( id )\n                .then(( item )=>\n                {\n                    SetItem(() => { return { item: item, img: getImgUrl(item )}; })\n                    SetStatus(() => { return { ...status, loading: false }; })\n                })\n        }\n    }, [ getImgUrl, id, onGetData ])\n    useEffect(()=>{ updateDataItem() }, [ id, updateDataItem ]);\n\n    let content;\n    const { item } = dataItem;\n    if( status.loading )\n    {\n        if( item === null || item === undefined )\n        {\n            content = <div>Character selection pending ...</div>\n        }\n        else\n        {\n            content = <LoadView/>\n        }\n    }\n    else\n    {\n        return (\n            <ItemDetalisView  item={ item }\n                              img={ dataItem.img }\n                              record={ React.Children.map( children, ( child ) =>\n                              {\n                                  return React.cloneElement( child, { item });\n                              })}\n                              namesHeader={ namesHeader }\n            />\n        );\n    }\n    return (\n        <section className=\"item-detalis alert alert-dark\">\n            { content }\n        </section>\n    )\n}\n\nexport default withRouter(ItemDetalisContainer);","import { SetRecord } from \"../components/record-view/record-view\";\nimport React, { useContext, useState } from \"react\";\nimport { Context } from \"../utils/context\"\nimport { ItemListContainer } from \"./item-list-container/item-list-container\";\nimport ItemDetalisContainer from \"./item-detalis-container/item-detalis-container\";\n\nexport const PeoplesPage = () =>\n{\n    const [ selectedItem, SetSelectedItem ] = useState(null);\n    const { GetAllPeople, GetPerson, GetImgPersonUrl, pages, namesHeader } = useContext( Context );\n\n    const DataCharacteristics =\n    [\n        {field: \"eyeColor\", label: \"Eye color\", reduction: \"\"},\n        {field: \"birthYear\", label: \"Birth year\", reduction: \"\"},\n        {field: \"gender\", label: \"Gender\", reduction: \"\"},\n        {field: \"mass\", label: \"Mass\", reduction: \"kg\"},\n        {field: \"height\", label: \"Height\", reduction: \"sm\"},\n    ];\n    const JsxCharacteristics = DataCharacteristics.map((item)=> SetRecord(item.field, item.label, item.reduction));\n\n    return (\n        <React.Fragment>\n            <ItemListContainer onLoadItemDetalis={(id) => {SetSelectedItem(id)}}\n                               onGetAlldata={GetAllPeople}\n                               currentPage={pages[0]}\n            />\n            <ItemDetalisContainer itemId={selectedItem}\n                             onGetData={GetPerson}\n                             getImgUrl={GetImgPersonUrl}\n                             namesHeader={namesHeader[0]}\n            >\n                {JsxCharacteristics}\n            </ItemDetalisContainer>\n        </React.Fragment>\n    );\n}\nexport const PlanetsPage = () =>\n{\n    const [selectedItem, SetSelectedItem] = useState(null);\n    const {GetImgPlanetUrl, GetPlanet, GetAllPlanets, pages, namesHeader} = useContext(Context);\n\n    const DataCharacteristics =\n        [\n            {field: \"population\", label: \"Population\", reduction: \"\"},\n            {field: \"surfaceWater\", label: \"Surface water\", reduction: \"%\"},\n            {field: \"terrain\", label: \"Terrain\", reduction: \"\"},\n            {field: \"rotationPeriod\", label: \"Rotation period\", reduction: \"day\"},\n            {field: \"diameter\", label: \"Diameter\", reduction: \"km\"},\n        ];\n    const JsxCharacteristics = DataCharacteristics.map((item)=> SetRecord(item.field, item.label, item.reduction));\n\n    return (\n        <React.Fragment>\n            <ItemListContainer onLoadItemDetalis={(id) => {SetSelectedItem(id)}}\n                               onGetAlldata={GetAllPlanets}\n                               currentPage={pages[1]}\n            />\n            <ItemDetalisContainer itemId={selectedItem}\n                                  onGetData={GetPlanet}\n                                  getImgUrl={GetImgPlanetUrl}\n                                  namesHeader={namesHeader[1]}\n            >\n                {JsxCharacteristics}\n            </ItemDetalisContainer>\n        </React.Fragment>\n    );\n}\nexport const StarshipsPage = () =>\n{\n    const [selectedItem, SetSelectedItem] = useState(null);\n    const {GetImgStarshipUrl, GetStarship, GetAllStarships, pages, namesHeader} = useContext(Context);\n\n    const DataCharacteristics =\n        [\n            {field: \"starshipClass\", label: \"Class\", reduction: \"\"},\n            {field: \"length\", label: \"Length\", reduction: \"m\"},\n            {field: \"MGLT\", label: \"MGLT\", reduction: \"In h\"},\n            {field: \"crew\", label: \"Crew\", reduction: \"\"},\n            {field: \"passengers\", label: \"Passengers\", reduction: \"\"},\n        ];\n    const JsxCharacteristics = DataCharacteristics.map((item)=> SetRecord(item.field, item.label, item.reduction));\n\n    return (\n        <React.Fragment>\n            <ItemListContainer onLoadItemDetalis={(id) => {SetSelectedItem(id)}}\n                               onGetAlldata={GetAllStarships}\n                               currentPage={pages[2]}\n            />\n            <ItemDetalisContainer itemId={selectedItem}\n                                  onGetData={GetStarship}\n                                  getImgUrl={GetImgStarshipUrl}\n                                  namesHeader={namesHeader[2]}\n            >\n                {JsxCharacteristics}\n            </ItemDetalisContainer>\n        </React.Fragment>\n    );\n}","import React from \"react\";\nimport \"./not-found-view.sass\"\n\nexport const NotFoundView = () =>\n{\n    return (\n        <div className=\"not-found-view\">\n            <h2>Page not found!<br/></h2>\n            <span>Unfortunately, there is no such page :(<br/></span>\n        </div>\n    );\n}","import {HeaderView} from \"../header-view/header-view\";\nimport React, {useContext} from \"react\";\nimport {RandomPerson, RandomPlanet, RandomStarship} from \"../../containers/randoms-containers\";\nimport {PeoplesPage, PlanetsPage, StarshipsPage} from \"../../containers/item-pages-containers\";\nimport { Route, Switch } from \"react-router-dom\";\nimport {NotFoundView} from \"../not-found-view/not-found-view\";\nimport {Context} from \"../../utils/context\";\nimport \"./app-view.sass\"\n\nexport const AppView = () =>\n{\n    const { pages } = useContext( Context );\n\n    return (\n        <div className={\"app\"}>\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <div className={\"app-gird\"}>\n                            <HeaderView/>\n                            <Switch>\n                                <Route path={\"/\" + pages[0] + \"/:id?\"}\n                                       render={()=>\n                                           <React.Fragment>\n                                               <RandomPerson/>\n                                               <PeoplesPage/>\n                                           </React.Fragment>}\n                                />\n                                <Route path={\"/\" + pages[1] + \"/:id?\"}\n                                       render={()=>\n                                           <React.Fragment>\n                                               <RandomPlanet/>\n                                               <PlanetsPage/>\n                                           </React.Fragment>}\n                                />\n                                <Route path={\"/\" + pages[2] + \"/:id?\"}\n                                       render={()=>\n                                           <React.Fragment>\n                                               <RandomStarship/>\n                                               <StarshipsPage/>\n                                           </React.Fragment>}\n                                />\n                                <Route path={\"/\"} exact\n                                       render={()=>\n                                           <React.Fragment>\n\n                                           </React.Fragment>}\n                                />\n\n                                <Route render={()=> <NotFoundView/>}/>\n                            </Switch>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}","import { Service } from \"./services/service\"\nimport React from \"react\";\nimport ReactDOM from \"react-dom\"\nimport { RegisterError } from \"./containers/error-container/error-container\";\nimport { Provider as ProviderService } from \"./utils/context\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport {AppView} from \"./components/app-view/app-view\";\n\nconst service = new Service();\nReactDOM.render(\n    <RegisterError>\n        <ProviderService value={ service }>\n            <Router>\n                <AppView/>\n            </Router>\n        </ProviderService>\n    </RegisterError>\n    , document.getElementById( \"root\" ));","export class Service\n{\n    pages = [\"people\", \"planets\", \"starships\"];\n    namesHeader = [\"character\", \"planet\", \"starship\"];\n    _apiUrl = `https://swapi.dev/api/`;\n    _imgUrl = 'https://starwars-visualguide.com/assets/img/';\n\n    _getId = (url) =>\n    {\n        return url.match(/\\/([0-9]*)\\/$/)[1];\n    }\n    getResource = async (url) =>\n    {\n        const req = await fetch(`${this._apiUrl}${url}`);\n        if (req.status === 404)\n        {\n\n        }\n\n        if(req.ok === false)\n        {\n            throw new Error(`Could not fetch ${`${this._apiUrl}${url}`} received ${req.saltLength}`);\n        }\n        return await req.json();\n    }\n\n\n    GetAllPeople = async () =>\n    {\n        const res = await this.getResource(this.pages[0] + `/`);\n        return res.results.map(this._transformPerson);\n    }\n    GetPerson = async (id) =>\n    {\n        const item = await this.getResource(this.pages[0] + `/${id}/`);\n        return this._transformPerson(item);\n    }\n    _transformPerson = (person) =>\n    {\n        return {\n            id: this._getId(person.url),\n            name: person.name,\n            gender: person.gender,\n            birthYear: person.birth_year,\n            eyeColor: person.eye_color,\n            mass: person.mass,\n            height: person.height\n        }\n    }\n    GetImgPersonUrl = ({id}) =>\n    {\n        return this._imgUrl+\"characters/\"+id+\".jpg\";\n    }\n    GetImgPersonUrl2 = (id) =>\n    {\n        return this._imgUrl+\"characters/\"+id+\".jpg\";\n    }\n\n    GetAllPlanets = async () =>\n    {\n        const res = await this.getResource(this.pages[1] + `/`);\n        return res.results.map(this._transformPlanet);\n    }\n    GetPlanet = async (id) =>\n    {\n        const item = await this.getResource(this.pages[1] + `/${id}/`);\n        return this._transformPlanet(item);\n    }\n    _transformPlanet = (planet) =>\n    {\n        return {\n            id: this._getId(planet.url),\n            name: planet.name,\n            population: planet.population,\n            rotationPeriod: planet.rotation_period,\n            diameter: planet.diameter,\n            climate: planet.climate,\n            terrain: planet.terrain,\n            surfaceWater: planet.surface_water\n        }\n    }\n    GetImgPlanetUrl = ({id}) =>\n    {\n        return this._imgUrl + this.pages[1] + `/` + id + \".jpg\";\n    }\n    GetImgPlanetUrl2 = (id) =>\n    {\n        return this._imgUrl + this.pages[1] + `/` + id + \".jpg\";\n    }\n\n\n    GetAllStarships = async () =>\n    {\n        const res = await this.getResource( this.pages[2] + `/`);\n        return res.results.map(this._transformStarship);\n    }\n    GetStarship = async (id) =>\n    {\n        const item = await this.getResource(this.pages[2] + `/${id}/`);\n        return this._transformStarship(item);\n    }\n    _transformStarship = (item) =>\n    {\n        return {\n            id: this._getId(item.url),\n            name: item.name,\n            model: item.model,\n            starshipClass: item.starship_class,\n            costInCredits: item.cost_in_credits,\n            length: item.length,\n            passengers: item.passengers,\n            crew: item.crew,\n            MGLT: item.MGLT\n        }\n    }\n    GetImgStarshipUrl = ({id}) =>\n    {\n        return this._imgUrl + this.pages[2] + `/` + id + \".jpg\";\n    }\n    GetImgStarshipUrl2 = (id) =>\n    {\n        return this._imgUrl + this.pages[2] + `/` + id +\".jpg\";\n    }\n\n    GetNewUrlImg = (className) =>\n    {\n        document.querySelector(className).src = \"https://i.ibb.co/dMz5tpx/note404.jpg\";\n    }\n}"],"sourceRoot":""}